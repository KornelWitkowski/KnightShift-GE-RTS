/* 
    Maski mają na celu przechwytywanie różnych eventów związanych z tym samym markerem.
    Ich użycie jest konieczne do zamykania i otwierania tej samej bramy dwoma przyciskami:
    jeden marker na brame dwa na guziki. W pozostałych wypadkach ich użycie jest opcjonalne
    - zwiększa bezpieczeństwo kodu.

    Trywialny przykład: załóżmy, że mamy marker o numerze 3 i tam znajduje się brama. 3 w zapisie binarnym to 0011.
    Przyciskowi do zamykania przypisujemy liczbę 0111, a do otwierania liczbę 1011. Jeśli dostajemy numer przycisku,
    to początek liczby mówi, czy otwieramy (01), czy zamykamy (10), a koniec 11, że bramę na markerze 3.

*/

#define MASK0                        2047    //0b 0000 0111 1111 1111
#define MASK_OPEN_GATE               2048    //0b 0000 1000 0000 0000
#define MASK_CLOSE_GATE              4096    //0b 0001 0000 0000 0000
#define MASK_FAST_TELEPORT           6144    //0b 0001 1000 0000 0000
#define MASK_CAVE_FALL               8192    //0b 0010 0000 0000 0000
#define MASK_EXP_LVL_FIELD           10240   //0b 0010 1000 0000 0000
#define MASK_CONV_RESISTANCE         12288   //0b 0011 0000 0000 0000
#define MASK_STEP_ON_TO_WIN          14336   //0b 0011 1000 0000 0000
#define MASK_TRAP_LIGHTNING          16384   //0b 0100 0000 0000 0000
#define MASK_TRAP_ON_STEP_GHOST      18432   //0b 0100 1000 0000 0000
#define MASK_TRAP_CAPTURE_FIELD      20480   //0b 0101 0000 0000 0000
#define MASK_TRAP_REMOVE_UNIT        22528   //0b 0101 1000 0000 0000
#define MASK_TRAP_ON_STEP_MINOTAUR   24576   //0b 0110 0000 0000 0000
#define MASK_PRISONER                26624   //0b 0110 1000 0000 0000
// #define MASK_TRAP_MAGIC_DAMAGE       28672   //0b 0111 0000 0000 0000
// #define MASK_PRISONER                30720   //0b 0111 1000 0000 0000

/*
    Każdemu unitowi można przypisać liczbę funkcją unit.SetScriptData.
    Za jej pomocą zapisujemy tutaj informacje o eventach związanych z jednostką: np. po zabiciu jednostki 
    pojawią się, jako pułapka szkielety. Jednostką także przypisujemy tutaj także dodatkowe umiejętności takie jak
    nekromancja. Aby możliwe było przypisanie pułapki i nekromancji musimy użyć masek.
    Np. możemy zapisać pewną liczbę w systemie dwójkowym: 000110 000011. Pierwsze 6 bitów będzie zawierało informacje o nekromancji itd.,
    a 6 ostatnich o pułapce. Aby odzyskać informacje stosujemy maski. Przykład: (111111 000000 & 000110 000011)  = 000110 000000.
    (000000 111111 & 000110 000011)  = 000000 000011.

*/

#define MASK_SCRIPT_DATA_TRAP (63 << 20) //0b 0000 0000 0011 1111


#define SCRIPT_DATA_CONVERSION_CAPTURE_RESISTANCE (1 << 16)
#define SCRIPT_DATA_LOSE_WHEN_KILLED (1 << 17)
#define SCRIPT_DATA_WIN_WHEN_KILLED (1 << 18)
#define SCRIPT_DATA_NECROMANCER (1 << 19)
#define SCRIPT_DATA_TRAP_5_SKELETON_TIER_1 (1 << 20) 
#define SCRIPT_DATA_TRAP_5_SKELETON_TIER_2 (2 << 20)
#define SCRIPT_DATA_TRAP_5_SKELETON_TIER_3 (3 << 20)
#define SCRIPT_DATA_TRAP_5_SKELETON_TIER_4 (4 << 20)
#define SCRIPT_DATA_TRAP_HYDRA_SKELETON_TIER_1 (5 << 20)
#define SCRIPT_DATA_TRAP_HYDRA_SKELETON_TIER_2 (6 << 20)
#define SCRIPT_DATA_TRAP_HYDRA_SKELETON_TIER_3 (7 << 20)
#define SCRIPT_DATA_TRAP_HYDRA_SKELETON_TIER_4 (8 << 20)
#define SCRIPT_DATA_TRAP_DEMON_1 (9 << 20)
#define SCRIPT_DATA_TRAP_DEMON_2 (10 << 20)
#define SCRIPT_DATA_TRAP_POISON_ATTACKER  (11 << 20)
#define SCRIPT_DATA_TRAP_POISON  (12 << 20)
#define SCRIPT_DATA_TRAP_MAGIC_DAMAGE  (13 << 20)
#define MASK_SCRIPT_DATA_FUNCTIONAL 63 << 26
#define SCRIPT_DATA_MEDUSA  2 << 26

#define MARKER_FIRST_EXPERIENCE_LVL_FIELD 100
#define MARKER_FIRST_PRISONERS 920

#define STEP_TO_WIN_GOAL 2
#define KILL_TO_WIN_GOAL 3 
#define LOSE_WHEN_KILL_GOAL 4

#include "MarkerFunctions\Functions\Common.ech"

#include "MarkerFunctions\Functions\AtmoshpericEvents.ech"
#include "MarkerFunctions\Functions\GateKeepers.ech"
#include "MarkerFunctions\Functions\Gates.ech"
#include "MarkerFunctions\Functions\Medusa.ech"
#include "MarkerFunctions\Functions\Milk.ech"
#include "MarkerFunctions\Functions\Necromancy.ech"
#include "MarkerFunctions\Functions\SpecialFields.ech"
#include "MarkerFunctions\Functions\Teleports.ech"
#include "MarkerFunctions\Functions\Traps.ech"
#include "MarkerFunctions\Functions\UnitBoosts.ech"
#include "MarkerFunctions\Functions\UnitGoals.ech"
#include "MarkerFunctions\Functions\Prisoners.ech"
#include "MarkerFunctions\Functions\Sleepers.ech"

#include "MarkerFunctions\Artefact.ech"
#include "MarkerFunctions\Initialize.ech"
#include "MarkerFunctions\PeriodicEvents.ech"
#include "MarkerFunctions\UnitDestroyed.ech"

/*
    `Initialize.ech` - zawiera funkcje przypisującą odpowiednie własności do danych punktów, jednostek, obiektów:
        tworzy teleporty, pułapki, nadaje doświadczenie, itp.

    `Artefact.ech` - obsługuje eventy związane z wejściem na dane pole - obsługuje pułapki, otwieranie bram itd.

    `PerodicEvents.ech` - obsługuje periodyczne eventy zainicjowane w `Initialize.ech`. Plik m.in. odpowiedzialny jest za wieczną burzę i wieczny deszcz ognia

    `UnitDestroyed.ech` - obsługuje zdarzenia po śmierci jednostek jak pułapki, wygrana, przegrana itp.
*/
