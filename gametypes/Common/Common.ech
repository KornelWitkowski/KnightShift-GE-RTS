// Import funkcji takich jak SetEnemies, SetAlly, itd.
#include "Math.ech"
#include "..\AIPlayers\Rand.ech"
#include "..\Campaigns\Common.ech"

consts
{
    SECOND = 20;
    MINUTE = 1200;
}


function void ImproveHPRegeneration(unitex uUnit, int iHPExtraSpeed)
{
    /* Funkcja do zwiększenia regeneracji życia jednostek. Wartość `iHPExtraSpeed` odpowiada liczbie
       dodatkowych regenerowanych punktów HP, prawdopodobnie, na sekundę
    */
    int i;

    for(i=0; i<iHPExtraSpeed; ++i)
    {
        // Uwaga `AddHPRegenerationSpeed(2, true)` nie jest równoważne dwukrotnemu wywołaniu poniższej funkcji!
        uUnit.AddHPRegenerationSpeed(1, true);
    }
}


function void AiChooseEnemy()
    /* Wybiera głównego przeciwnika gracza AI. Główny przeciwnik będzie atakowany przez gracza AI, a także gracz AI będzie
    na niego rzucać kruki i będzie częściej używać na niego przejęcia i zamiany. Funkcja nie jest deterministyczna, ale największe prawodpobieństwo mają
    gracze najbliżsi graczowi AI. */
{
    int i, j;
    int iX, iY;
    int iDistance, iShortestDistance;
    int iStd;

    player rPlayer, rPlayerMainEnemy, rPlayerNewMainEnemy, rPlayer2;

    iShortestDistance = 10000;

    // Wybieramy szum zależny od rozmiaru mapy który wykorzystamy w dalszej części kodu do wyboru przeciwnika
    // Szum ma na celu nadanie pewnej losowości wyborom
    iStd = (GetRight() + GetBottom())/10;

    for(i=0; i<8; ++i)
    {
        rPlayer = GetPlayer(i);
        if(rPlayer.IsAI())
        {
            rPlayerNewMainEnemy = null; 
            iShortestDistance = 10000;

            for(j=0; j<8; j=j+1)
            {
                if(i==j) continue;

                rPlayer2 = GetPlayer(j);
                if(rPlayer.IsEnemy(rPlayer2)!=0 && rPlayer2.IsAlive() && rPlayer2.GetScriptData(1)!=1)
                {
                    /* 
                        Jako głównego przeciwnika wybieramy przeciwników najbliżej gracza. Aby algorytm nie był
                        w pełni deterministyczny do pozycji gracza dodajemy szum. Prawodpobieństwo wybrania najbliższego
                        przeciwnika będzie największe, ale jest możliwe wybranie innych przeciwników.
                        Im przeciwnik dalej tym mniejsza szansa na wybranie
                    */
                    iDistance = Distance(rPlayer.GetStartingPointX(),
                                         rPlayer.GetStartingPointY(),
                                         rPlayer2.GetStartingPointX() + GaussianDistribution(iStd),
                                         rPlayer2.GetStartingPointY() + GaussianDistribution(iStd));
                    
                    if(iDistance < iShortestDistance)
                    {
                        iShortestDistance = iDistance;
                        rPlayerNewMainEnemy = GetPlayer(j);
                    }
                }
            }

            if(rPlayerNewMainEnemy != null)
            {
                rPlayer.SetMainEnemyIFFNum(rPlayerNewMainEnemy.GetIFFNumber());
            }
        }
    }
}

function void SetBufferSideColorName(int iBuffer, int iSideColor)
/* Zapisuje nazwę koloru w wybranych bufforze dla stringa. Używane w trybach KotH
   i ekonomicznym do wyświetlania wyników */
{
    if(iSideColor==0)
    {
        SetStringBuffTranslate(iBuffer, "translateYellow");
    }
    else if(iSideColor==1)
    {
        SetStringBuffTranslate(iBuffer, "translateRed");
    }
    else if(iSideColor==2)
    {
        SetStringBuffTranslate(iBuffer, "translateBlue");
    }
    else if(iSideColor==3)
    {
        SetStringBuffTranslate(iBuffer, "translateGreen");
    }
    else if(iSideColor==4)
    {
        SetStringBuffTranslate(iBuffer, "translatePurple");
    }
    else if(iSideColor==5)
    {
        SetStringBuffTranslate(iBuffer, "translateOrange");
    }
    else if(iSideColor==6)
    {
        SetStringBuffTranslate(iBuffer, "translateBlack");
    }
    else
    {
        SetStringBuffTranslate(iBuffer, "translateGray");
    }
}

function int IsAlive(unitex uUnit)
{
    if(uUnit == null)
        return false;

    if(!uUnit.IsLive())
        return false;

    return true;
}

function void MakeWeather()
// Losowe efekty pogodowe
{
    if ( RAND(100) < 10 ) // 10 %
    {
        if ( GetCurrentTerrainNum() == 5 ) // zima
        {
            Snow((GetLeft() + GetRight())/2, (GetTop() + GetBottom())/2, 128, 100, 1000, 100, 5+Rand(6));
        }
        else if ( Rand(5) == 0 )
        {
            Rain((GetLeft() + GetRight())/2, (GetTop() + GetBottom())/2, 128, 100, 1000, 100, 5+Rand(6));
        }
    }
}


function void EnablePlayer14Spells()
/*  Włączenie czarów dla gracza 14 (czarny, potwory na mapie)

    Informacja encyklopedyczna:

    Gracz 14 wykorzytuje tarczę czarodziejki, przejęcie, zamianę w krowę i teleporty kapłanów. Nie jest w stanie wykorzystać
    burzy, wilka i deszczu ognia, ponieważ ten numer gracza nie może wykorzystać funkcji AI.
    AI może być wykorzystane na pewno przez graczy z numerami 0-11. Dla wyższych numerów nie działa.

    Włączenie AI dla gracza 11 można zobaczyć w pliku 'AdventureGE_1.ech'.
*/
{
    int i, iNumberOfUnits;
    unitex uUnit;
    player rPlayer;
    rPlayer = GetPlayer(14);

    rPlayer.ResearchUpdate("SPELL_CAPTURE3");
    rPlayer.ResearchUpdate("SPELL_SHIELD3");
    rPlayer.ResearchUpdate("SPELL_CONVERSION3");
    rPlayer.ResearchUpdate("SPELL_TELEPORTATION3");

    // Magom trzeba włączyć zamiane w krowę na auto - w przeciwnym wypadku nie bedą używać czaru.
    iNumberOfUnits = rPlayer.GetNumberOfUnits();
    for(i=0; i<iNumberOfUnits; ++i)
    {
        uUnit = rPlayer.GetUnit(i);

        if(uUnit.GetMaxMagic()>= 200)
            uUnit.CommandSetMakeMagicConversionMode(true);
    }    
}

function void EnableExtraSkirmishPlayersMilkPool()
{
    /* Jeśli gracz 13, 14 i 15 mają na mapie postawione obory, to krowy będą się pasły praktycznie w nieskończoność
       zamiast stać przy oborze ze względu na zapełniony milkpool. */
    player rPlayer;

    rPlayer = GetPlayer(14);
    rPlayer.SetMaxMoney(1000000);

    rPlayer = GetPlayer(13);
    rPlayer.SetMaxMoney(1000000);

    rPlayer = GetPlayer(12);
    rPlayer.SetMaxMoney(1000000);
}

function void InitializeStatistics()
// Funkcja przygotowuje statystyki wykorzystywane na ekranie po zakończonej grze RTS.
{
        StatisticReset();
        StatisticAddTab("translateStatisticsTabSummary", statisticTabTypeSummary, true);
        StatisticAddTab("translateStatisticsTabMoney", statisticTabTypeMoney, true);
        StatisticAddTab("translateStatisticsTabUnitsStat", statisticTabTypeUnits, true);
        StatisticSetSortOrder(0, 3, true);
}

function void CheckMilkPool(int iMaxCowSheds)
/*  Sprawdza liczbę obór graczy, aby wyznaczyć maksymalną ilość mleka.

    int iMaxCowSheds -  maksymalna liczba obór do zbudowania, która wyznacza limit mleka. 4 dla wojny wiosek.
                        8 dla trybu `8 obór`.
*/
{
    int i;
    int iCountBuilding;
    player rPlayer;

    for(i=0; i < 8; i=i+1)
    {
        rPlayer = GetPlayer(i);
        if(rPlayer!=null)
        {
            if(rPlayer.IsAlive()) 
            {
                /* 
                   Sprawdzamy ile obór mają gracze, aby ustalić poziom mleka.
                   Gracze AI mają zawsze stały pool mleka ustawiony na początku gry bądź w skrypcie AI. 
                */
                if(rPlayer.IsHuman())
                {
                    iCountBuilding = rPlayer.GetNumberOfBuildings(buildingHarvestFactory);

                    if(iMaxCowSheds < iCountBuilding)
                    {
                        // Maksymalna ilość mleka jest ograniczona przez limit obór w trybie.
                        rPlayer.SetMaxMoney(100*iMaxCowSheds);
                    }   
                    else if (iCountBuilding==0)
                    {
                        // Jeśli gracza ma 0 obór, to milk pool wynosi 100
                        rPlayer.SetMaxMoney(100);
                    }
                    else
                    {
                        rPlayer.SetMaxMoney(100*iCountBuilding);
                    }
                }
            }
        }
    }
}

function int CountNormalBuildings(player rPlayer)
// Zlicza "normalne" budynki, czyli obory, wieże itd. z wyłączeniem takich jak magiczna brama itd.
{
    int i;
    int iNumberOfBuldings;
    int iNumberOfTowers;
    int iNumberOfUnits;
    unitex uUnit;

    iNumberOfBuldings = rPlayer.GetNumberOfBuildings("COWSHED");
    iNumberOfBuldings = iNumberOfBuldings + rPlayer.GetNumberOfBuildings("HUT");
    iNumberOfBuldings = iNumberOfBuldings + rPlayer.GetNumberOfBuildings("BARRACKS");
    iNumberOfBuldings = iNumberOfBuldings + rPlayer.GetNumberOfBuildings("COURT");
    iNumberOfBuldings = iNumberOfBuldings + rPlayer.GetNumberOfBuildings("SHRINE");
    iNumberOfBuldings = iNumberOfBuldings + rPlayer.GetNumberOfBuildings("TEMPLE");
    iNumberOfBuldings = iNumberOfBuldings + rPlayer.GetNumberOfBuildings("SKIRMISH_COURT");

    iNumberOfUnits = rPlayer.GetNumberOfUnits();
    iNumberOfTowers = 0;
    for(i=0; i<iNumberOfUnits; ++i)
    {
        uUnit = rPlayer.GetUnit(i);
        if(uUnit.IsInTower())
            ++iNumberOfTowers; 
    }

    iNumberOfBuldings = iNumberOfBuldings + iNumberOfTowers;

    return iNumberOfBuldings;
}

function int CheckIfPlayerWasDestroyed(int bAiChooseNewMainEnemy)
/* Sprawdza, czy któryś z graczy został zniszczony. Jeśli tak, to oznacza go jako pokonanego.
   Warunkiem przegranej jest utrata wszystkich budynków, chyba, że gracz żadnego nie zbudował w czasie gry - 
   wtedy warunkiem jest utrata wszystkich unitów. 
   
   args:
   bAiChooseNewMainEnemy - jeśli true to po pokonaniu gracza, AI wybiera nowego głównego przeciwnika.

   return bOneHasBeenDestroyed - zmienna informuje, czy jakikolwiek gracz został pokonany. Jeśli nie to nie będzie końca rozgrywki.
                                 Zapobiega automatycznemu zwycięstwu po wybrania np. rozgrywki z graczami 1 i 2 z sojuszem 1,2 vs 3, 4
*/
{
    int i;
    int j;
    int iCountBuilding;
    int bOneHasBeenDestroyed;   
    player rPlayer;

    bOneHasBeenDestroyed = false;

    for(i=0; i<8; i=i+1)
    {
        rPlayer = GetPlayer(i);
        if(rPlayer == null) continue;

        if(!rPlayer.IsAlive())
        {
            bOneHasBeenDestroyed = true;
            continue;
        }
    
        iCountBuilding = CountNormalBuildings(rPlayer);
                
        if(iCountBuilding && (rPlayer.GetScriptData(0) == 0)) rPlayer.SetScriptData(0, 1);
                    
        if (iCountBuilding==0)
        {
            if(rPlayer.GetScriptData(0) == 1)
            {
                rPlayer.SetScriptData(1, 1);
                KillArea(rPlayer.GetIFF(), GetRight()/2, GetBottom()/2, 0, 128);
                KillArea(rPlayer.GetIFF(), GetRight()/2, GetBottom()/2, 1, 128);
                rPlayer.SetGoalState(0, goalFailed, true);

                bOneHasBeenDestroyed = true;
                SetStateDelay(150);
                state Defeat;

                if(bAiChooseNewMainEnemy)
                    AiChooseEnemy();
            }
            else
            {
                if(rPlayer.GetNumberOfUnits()==0)
                {
                    rPlayer.SetScriptData(1, 1); // Defeat
                    rPlayer.SetGoalState(0, goalFailed, true);

                    bOneHasBeenDestroyed = true;
                    SetStateDelay(150);
                    state Defeat;

                    if(bAiChooseNewMainEnemy)
                        AiChooseEnemy();
                }
            }
        }
    }

    return bOneHasBeenDestroyed;
}

function int CheckIfActiveEnemiesExist(int comboAlliedVictory)
/*
    Sprawdza, czy na mapie znajdują się aktywni przeciwnicy
*/ 
{
    int i, j;
    int bActiveEnemies;
    player rPlayer, rPlayer2;

    int bOneHasBeenDestroyed;
    bOneHasBeenDestroyed=false; 

    bActiveEnemies = false;

    for(i=0; i<8; i=i+1)
    {
        rPlayer = GetPlayer(i);
        if(rPlayer!=null && rPlayer.IsAlive()) 
        {
            for(j=i+1; j<8; j=j+1)
            {
                rPlayer2 = GetPlayer(j);
                if(rPlayer2!=null && rPlayer2.IsAlive() && (!(rPlayer.IsAlly(rPlayer2) && comboAlliedVictory))) 
                {
                    bActiveEnemies=true;
                }
            }
        }
    }

    for(i=0; i<8; i=i+1)
    {
        rPlayer = GetPlayer(i);
        if(rPlayer!=null)
        {
            if(!rPlayer.IsAlive()) bOneHasBeenDestroyed = true;
        }
    }

    // Odnotowujemy zwycięstwo w liście zadań jeśli nastąpiło.
    // Domyślnie jest tylko jeden cel z numerem 0.

    if(!bActiveEnemies && bOneHasBeenDestroyed)
    {
        for(i=0; i<8; i=i+1)
        {
            rPlayer = GetPlayer(i);
            if(rPlayer!=null && rPlayer.IsAlive()) 
            {
                rPlayer.SetGoalState(0, goalAchieved, true);
            }
        }
    }

    return bActiveEnemies;
}

function void UseMagic(player rPlayer)
    /* Efektywne czary: deszcz ognia, burza, zamiana w krowe i przejęcie dla botów. Funkcja jest umieszczona w skrypcie
       misji, ponieważ boty nie mają dostępu do wszystkich graczy tylko do jednego przez 'GetMainEnemy'. 
       Aby boty rzucały czarny to należy wywoływać funkcje w zegarze  */
{
    int i, j;
    int iX, iY;
    int iMinDistance, iDistance;
    int iRandNum;

    int iNumberOfUnits, iNumberOfEnemyUnits;
    int bBombardBase;
    unitex uUnit, uUnitEnemy, uEnemyClosestTower, uEnemyClosest;
    player rPlayer2, rPlayerEnemy;
    
    rPlayerEnemy = null;
    
    if(RAND(2)==0)
    {
        rPlayerEnemy = rPlayer.GetMainEnemy();
    }
    else
    {
        iRandNum = RAND(8);
        for(j=0; j<8; j=j+1)
        {
            rPlayer2 = GetPlayer((j+iRandNum) % 8);

            if(rPlayer2 == null)
                continue;

            if(rPlayer.GetIFFNumber()==rPlayer2.GetIFFNumber())
                continue;

            if(rPlayer.IsEnemy(rPlayer2)!=0 && rPlayer2.IsAlive() && rPlayer2.GetScriptData(1)!=1)
            {
                rPlayerEnemy = rPlayer2;
                break;
            }
        }
    }
    
    if(rPlayerEnemy==null) 
        return;

    iNumberOfUnits = rPlayer.GetNumberOfUnits();
    iNumberOfEnemyUnits = rPlayerEnemy.GetNumberOfUnits();

    for(i=0; i<iNumberOfUnits; i=i+1)
    {
        uUnit = rPlayer.GetUnit(i);

        if(uUnit.IsInSleepMode())
            continue;

        // Jeśli jednostka nie jest magiem lub czarodziejką to omijamy iteracje
        if(uUnit.GetMaxMagic() < 200 || uUnit.IsFlyable())
            continue;

        // Deszcz ognia
        if(RAND(2)==0)
        {
            // Koszt za 4 lvl burzy to 140 many. Reszta opcji jest droższa. Jeśli postać nie ma many to idziemy do kolejnej.
            if(uUnit.GetMagic() >= 140)
            {
                // Na początku szukamy fortyfikacji do zniszczenia. Szukamy najbliższej wieży
                iMinDistance = 1000;
                uEnemyClosestTower == null;

                for(j=0; j<iNumberOfEnemyUnits; ++j)
                {
                    uUnitEnemy = rPlayerEnemy.GetUnit(j);
                    if(uUnitEnemy.IsInTower())
                    {
                        // Dodajemy szum, aby zwiększyć liczbę możliwych targetowanych wież.
                        iDistance = uUnit.DistanceTo(uUnitEnemy.GetLocationX() - 2 + RAND(5),
                                                    uUnitEnemy.GetLocationY() - 2 + RAND(5));

                        if(iDistance < iMinDistance)
                        {
                            iMinDistance = iDistance;
                            uEnemyClosestTower = uUnitEnemy;
                        }
                    }
                }

                if((uEnemyClosestTower!=null) && (iMinDistance < 30))
                {
                    uUnit.CommandStop();
                    if(uUnit.GetWeaponType() == 6)
                    {
                        uUnit.CommandMakeMagicStorm(uEnemyClosestTower.GetLocationX(), uEnemyClosestTower.GetLocationY(), 0);
                    }
                    else
                    {
                        uUnit.CommandMakeMagicFireRain(uEnemyClosestTower.GetLocationX(), uEnemyClosestTower.GetLocationY(), 0);
                    }
                    
                    continue;
                }

                // Jeśli nie znaleźliśmy żadnych fortyfikacji do szukamy celów w pobliżu bazy wroga
                bBombardBase = false;

                // Tutaj sprawdzamy, czy jest możliwy atak na budynki w bazie wroga. Sprawdzamy teren w okolicy punktu startowego
                for(j=0; j<12; ++j)
                {
                    iX = rPlayerEnemy.GetStartingPointX() + GaussianDistribution(15);
                    iY = rPlayerEnemy.GetStartingPointY() + GaussianDistribution(15);

                    // Jeśli deszcz będzie za blisko magów, to nie rzucamy
                    if(uUnit.DistanceTo(iX, iY) < 6)
                        continue;

                    if(uUnit.DistanceTo(iX, iY) > 24)
                        continue;

                    // Jeśli wróg ma budynki, lub unity, w wylosowanym punkcie to rzucamy.
                    if((rPlayerEnemy.GetNumberOfBuildings(iX, iY, 0, 8) >= 3) || (rPlayerEnemy.GetNumberOfUnits(iX, iY, 0, 8) >= 5))
                    {
                        bBombardBase = true;
                        break;   
                    }      
                }

                if(bBombardBase)
                {
                    uUnit.CommandStop();
                    if(uUnit.GetWeaponType()==6)
                    {
                        uUnit.CommandMakeMagicStorm(iX, iY, 0);
                    }
                    else
                    {
                        uUnit.CommandMakeMagicFireRain(iX, iY, 0);
                    }

                    continue;
                }
            }
        }

        if(uUnit.GetMagic() < 70)
            continue;

        iMinDistance = 1000;
        uEnemyClosest == null;

        for(j=0; j<iNumberOfEnemyUnits; ++j)
        {
            uUnitEnemy = rPlayerEnemy.GetUnit(j);

            // CommadMakeMagic nie działa na unity na wieżach
            if(uUnitEnemy.IsInTower())
                continue;

            // Nie chcemy zamieniać krowy w krowę
            if(uUnitEnemy.IsHarvester())
                continue;

            // Jak jednostka jest w trybie skradania, to udajemy, że jej nie widzimy ;>
            if(uUnitEnemy.IsInCamouflageMode())
                continue;

            // Dodajemy szum, aby nie targetować zawsze tego samego unitu, ale umożliwić targetowanie innych znajdujących się blisko
            iDistance = uUnit.DistanceTo(uUnitEnemy.GetLocationX() - 3 + RAND(7),
                                            uUnitEnemy.GetLocationY() - 3 + RAND(7));

            if(iDistance < iMinDistance)
            {
                iMinDistance = iDistance;
                uEnemyClosest = uUnitEnemy;
            }

            if(iMinDistance < 8)
            {
                break;
            }
        }

        if(iMinDistance <= 18)
        {
            uUnit.CommandStop();
            if(uUnit.GetWeaponType()==6)
            {
                uUnit.CommandMakeMagicCapturing(uEnemyClosest);
            }
            else
            {
                uUnit.CommandMakeMagicConversion(uEnemyClosest);
            }

        }
    }
}


function int IsShooter(unitex uUnit)
{
    /* 
        uUnit.GetWeaponType = 3 odpowiada strzelcom: łucznik, włócznik, mag, wiedźma, kapłan. 
        Czarodziejka (i inne jednostki z piorunami) to uUnit.GetWeaponType = 6.
    */

    return (uUnit.GetWeaponType() == 3 || uUnit.GetWeaponType() == 6);
}