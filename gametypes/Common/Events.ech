/*
    Eventy, które się powtarzają w trybach. Plik zrobiony, aby ograniczyć ilość kodu i móc modyfikować
    kod dla wszystkich skryptów w jednym miejscu.
*/


event RemoveResources()
{
    return false;
}

// Włączenie graczy 9-15 na mapie
event UseExtraSkirmishPlayers()
{
    return true;
}

// Włączenie botów. Jeśli ustawimy return false, to botów w grze nie będzie.
event AIPlayerFlags()
{
    return 0x0F;
}

event Timer3()
{
    /* Ulepszone czary dla najtrudniejszych botów */

    int i;
    player rPlayer;

    for(i=0; i<8; ++i)
    {
        rPlayer = GetPlayer(i);

        if(rPlayer == null || !rPlayer.IsAlive())
            continue;


        if((rPlayer.GetScriptData(IS_GOLDEN_EDITION_AI) == 1) && rPlayer.IsAI())
        {
            UseMagic(rPlayer);
        }
    }

    MoveBackExtraPlayersUnits();
    MakeMarkerPeriodicEvents();
    MakeMissionPeriodicEvents();
}

// Eventy pogodowe. Należy ustawić timery, w skrypcie trybu, aby działały

event Timer4()
{
    MakeWeather();
}

event Timer7()
{
    StartWind();
}

event UnitDestroyed(unitex uUnitKilled)
{
    /* 
        Event przekazuje wieże, na której zginęła jednostka, graczowi AI. 
        Jeśli wieża należy do gracza AI to wysyła na nią jednostki.
    */
    int iX, iY, iZ, iAlpha;
    unit uAttacker;
    unitex uTower;
    unitex uUnit2, uUnit3;
    int bMarkerFunctionActivated;

    player rPlayerAttacker, rPlayerUnit;

    iX = uUnitKilled.GetLocationX();
    iY = uUnitKilled.GetLocationY();
    iZ = uUnitKilled.GetLocationZ();
    iAlpha = uUnitKilled.GetAlphaAngle();
    uAttacker = uUnitKilled.GetAttacker();
    rPlayerAttacker  = GetPlayer(uAttacker.GetIFFNumber());

    // Poniższy if przekazuje wieże botom po pokonaniu jednostki na wieży. Umożliwia to botom zajmowanie wież po pokonanym przeciwniku
    if(uUnitKilled.IsInTower())
    {
        uTower = GetUnit(iX, iY);

        if((rPlayerAttacker.IsAI()) && (rPlayerAttacker.GetIFFNumber() != 14))
        {
            if(rPlayerAttacker.GetScriptData(IS_GOLDEN_EDITION_AI) == 1)
                uTower.ChangePlayer(rPlayerAttacker);
        }
    }

    CheckMarkeredUnitDestroyedEvents(uUnitKilled);    
    MakeMissionUnitDestroyedEvents(uUnitKilled);
}


event UnitCreated(unitex uUnit)
{
   RemoveCapturedUnitArtefacts(uUnit); 
}

event Artefact(int iArtefactNum, unitex uUnitOnArtefact, player rPlayerOnArtefact)
{
    return MarkerFunctionsEventArtefact(iArtefactNum, uUnitOnArtefact, rPlayerOnArtefact);
}
